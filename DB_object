-- Impostazioni iniziali
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- SEQUENZE
CREATE SEQUENCE public.bagaglio_id_bagaglio_seq START 1;
CREATE SEQUENCE public.prenotazione_id_prenotazione_seq START 1;

-- TABELLE (senza FK)
CREATE TABLE public.amministratore (
    username VARCHAR(20) NOT NULL,
    password VARCHAR(20) NOT NULL,
    PRIMARY KEY (username, password)
);

CREATE TABLE public.utente_generico (
    username VARCHAR(20) NOT NULL,
    password VARCHAR(20) NOT NULL,
    PRIMARY KEY (username, password)
);

CREATE TABLE public.passeggero (
    id_documento VARCHAR(10) NOT NULL,
    nome VARCHAR(20) NOT NULL,
    cognome VARCHAR(20) NOT NULL,
    PRIMARY KEY (id_documento)
);

CREATE TABLE public.volo (
    codice_volo INTEGER NOT NULL,
    compagnia VARCHAR(20),
    data_volo DATE NOT NULL,
    orario_previsto TIME NOT NULL,
    ritardo INTEGER,
    stato_volo VARCHAR(20),
    tipo_volo VARCHAR(20) NOT NULL,
    aeroporto_destinazione VARCHAR(20),
    aeroporto_origine VARCHAR(20),
    gate VARCHAR(10),
    PRIMARY KEY (codice_volo),
    CONSTRAINT volo_stato_volo_check CHECK (stato_volo IN ('programmato', 'decollato', 'late', 'cancellato'))
);

CREATE TABLE public.prenotazione (
    id_prenotazione INTEGER NOT NULL DEFAULT nextval('public.prenotazione_id_prenotazione_seq'),
    username VARCHAR(50),
    password VARCHAR(50),
    documento_passeggero VARCHAR(10),
    numero_biglietto VARCHAR(20),
    posto_assegnato VARCHAR(10),
    stato_bagaglio VARCHAR(20),
    PRIMARY KEY (id_prenotazione),
    CONSTRAINT prenotazione_stato_bagaglio_check CHECK (stato_bagaglio IN ('caricato', 'ritirabile'))
);

CREATE TABLE public.bagaglio (
    id_bagaglio INTEGER NOT NULL DEFAULT nextval('public.bagaglio_id_bagaglio_seq'),
    codice_bagaglio INTEGER NOT NULL,
    stato_bagaglio VARCHAR(20),
    id_prenotazione INTEGER,
    PRIMARY KEY (id_bagaglio),
    CONSTRAINT bagaglio_stato_bagaglio_check CHECK (stato_bagaglio IN ('caricato', 'ritirabile'))
);

CREATE TABLE public.voligestiti (
    username_amministratore VARCHAR(20) NOT NULL,
    password_amministratore VARCHAR(20) NOT NULL,
    codice_volo INTEGER NOT NULL,
    PRIMARY KEY (username_amministratore, password_amministratore, codice_volo)
);

-- FOREIGN KEY
ALTER TABLE public.bagaglio
    ADD CONSTRAINT fk_bagaglio_prenotazione
    FOREIGN KEY (id_prenotazione) REFERENCES public.prenotazione(id_prenotazione) ON DELETE CASCADE;

ALTER TABLE public.prenotazione
    ADD CONSTRAINT fk_prenotazione_utente
    FOREIGN KEY (username, password) REFERENCES public.utente_generico(username, password) ON DELETE CASCADE;

ALTER TABLE public.prenotazione
    ADD CONSTRAINT fk_prenotazione_passeggero
    FOREIGN KEY (documento_passeggero) REFERENCES public.passeggero(id_documento);

ALTER TABLE public.voligestiti
    ADD CONSTRAINT fk_gestione_amministratore
    FOREIGN KEY (username_amministratore, password_amministratore)
    REFERENCES public.amministratore(username, password) ON DELETE CASCADE;

ALTER TABLE public.voligestiti
    ADD CONSTRAINT fk_gestione_volo
    FOREIGN KEY (codice_volo)
    REFERENCES public.volo(codice_volo) ON DELETE CASCADE;

-- SEQUENZA: valore iniziale (puoi anche non usarlo)
SELECT pg_catalog.setval('public.bagaglio_id_bagaglio_seq', 1, false);
SELECT pg_catalog.setval('public.prenotazione_id_prenotazione_seq', 1, false);

-- DATI (opzionali)
-- Se hai dati, scommenta le COPY e incolla i dati tra COPY e \.

-- COPY public.amministratore (username, password) FROM stdin;
-- mario    segreto
-- \.

-- COPY public.utente_generico (username, password) FROM stdin;
-- luigi    test123
-- \.

-- ecc...
